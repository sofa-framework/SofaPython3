name: CI

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, edited]
  push:

jobs:
  run:
    name: Run on ${{ matrix.os }} with SOFA ${{ matrix.sofa_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
        sofa_branch: [master, v21.06]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: src
        
      - name: Set env vars
        shell: bash
        run: |
          # Set env vars
          SOFA_ROOT=/opt/sofa
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            SOFA_ROOT='C:\sofa'
          fi
          echo "SOFA_ROOT=$SOFA_ROOT" | tee -a $GITHUB_ENV
          
          mkdir -p "$GITHUB_WORKSPACE/build" "$GITHUB_WORKSPACE/install" "$GITHUB_WORKSPACE/artifact"
               SRC_DIR="$(cd $GITHUB_WORKSPACE/src && pwd -W 2>/dev/null || pwd)"
             BUILD_DIR="$(cd $GITHUB_WORKSPACE/build && pwd -W 2>/dev/null || pwd)"
           INSTALL_DIR="$(cd $GITHUB_WORKSPACE/install && pwd -W 2>/dev/null || pwd)"
          ARTIFACT_DIR="$(cd $GITHUB_WORKSPACE/artifact && pwd -W 2>/dev/null || pwd)"
          echo "SRC_DIR=$SRC_DIR" | tee -a $GITHUB_ENV
          echo "BUILD_DIR=$BUILD_DIR" | tee -a $GITHUB_ENV
          echo "INSTALL_DIR=$INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" | tee -a $GITHUB_ENV

      - name: Setup SOFA and deps
        id: sofa
        uses: guparan/sofa-setup-action@master
        with:
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_root: ${{ env.SOFA_ROOT }}

      - name: Print sofa-setup-action outputs
        shell: bash
        run: |
          echo 'steps.sofa.outputs = ${{ toJSON(steps.sofa.outputs) }}'

      - name: ccache cache files
        if: ${{ runner.os != 'Windows' }}
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ccache_${{ steps.sofa.outputs.run_branch }}_${{ matrix.os }}_${{ hashFiles('.github/workflows/*.yml') }}

      - name: Build and install
        env:
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: "500M"
        shell: bash
        run: |
          ls -la "${{ steps.sofa.outputs.sofa_root }}"
          python_root="$(find $RUNNER_TOOL_CACHE -maxdepth 3 -type d -path '**/Python/${{ steps.sofa.outputs.python_version }}*/x64')"
          echo "RUNNER_TOOL_CACHE = $RUNNER_TOOL_CACHE"
          echo "python_root = $python_root"
          cd "$BUILD_DIR"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} && \
              cd $BUILD_DIR && \
              cmake \
                -GNinja \
                -DCMAKE_PREFIX_PATH="${{ steps.sofa.outputs.sofa_root }}\lib\cmake" \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" \
                ../src"
          else
            export CCACHE_BASEDIR=$SRC_DIR
            export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
            ccache -z
            cmake \
              -GNinja \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PREFIX_PATH=${{ steps.sofa.outputs.sofa_root }}/lib/cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" \
              -DPython_EXECUTABLE=$(which python${{ steps.sofa.outputs.python_version }}) \
              -DPython_ROOT=$python_root \
              ../src
          fi
          echo '------ ls -la "$SRC_DIR" ------'
          ls -la "$SRC_DIR"
          echo '------ ls -la "$BUILD_DIR" ------'
          ls -la "$BUILD_DIR"
          echo '------ cat "$BUILD_DIR/CMakeCache.txt" ------'
          cat "$BUILD_DIR/CMakeCache.txt"
          echo "--------------------------------"
          ninja install
          #echo ${CCACHE_BASEDIR}
          #ccache -s

      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: SofaPython3_${{ steps.sofa.outputs.run_branch }}_SOFA-${{ matrix.sofa_branch }}_${{ steps.sofa.outputs.sofa_os }}
          path: ${{ env.INSTALL_DIR }}

      - name: Install artifact
        uses: actions/download-artifact@v2
        with:
          name: SofaPython3_${{ steps.sofa.outputs.run_branch }}_SOFA-${{ matrix.sofa_branch }}_${{ steps.sofa.outputs.sofa_os }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: Set env vars for tests
        shell: bash
        run: |
          # Set env vars for tests
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$(cd $ARTIFACT_DIR/lib && pwd -W)" >> $GITHUB_PATH
            echo "$(cd $ARTIFACT_DIR/bin && pwd -W)" >> $GITHUB_PATH
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "DYLD_LIBRARY_PATH=$ARTIFACT_DIR/lib:${{ steps.sofa.outputs.sofa_root }}/lib:$DYLD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          else
            echo "LD_LIBRARY_PATH=$ARTIFACT_DIR/lib:${{ steps.sofa.outputs.sofa_root }}/lib:$LD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          fi
          echo "PYTHONPATH=$ARTIFACT_DIR/lib/python3/site-packages:$PYTHONPATH" | tee -a $GITHUB_ENV
          # Add execution right on the tests
          chmod +x $ARTIFACT_DIR/bin/*.Tests

      - name: Run test Binding.Sofa.Tests
        if: ${{ always() }}
        shell: bash
        run: |
          $ARTIFACT_DIR/bin/Bindings.Sofa.Tests

      - name: Run test Bindings.SofaRuntime.Tests
        if: ${{ always() }}
        shell: bash
        run: |
          $ARTIFACT_DIR/bin/Bindings.SofaRuntime.Tests

      - name: Run test Bindings.SofaTypes.Tests
        if: ${{ always() }}
        shell: bash
        run: |
          $ARTIFACT_DIR/bin/Bindings.SofaTypes.Tests

      - name: Run test Bindings.Modules.Tests
        if: ${{ always() }}
        shell: bash
        run: |
          $ARTIFACT_DIR/bin/Bindings.Modules.Tests
