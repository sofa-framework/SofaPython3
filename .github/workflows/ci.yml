name: CI

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, edited]
  push:

jobs:
  run:
    name: Run on ${{ matrix.os }} with SOFA ${{ matrix.sofa_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
        sofa_branch: [master, v21.06]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: src
        
      - name: Set env vars
        shell: bash
        run: |
          # Set env vars
          EXE=''
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            EXE='.exe'
          fi
          echo "EXE=$EXE" | tee -a $GITHUB_ENV
          
          PYBIND11_VERSION=2.4.3
          PYBIND11_INSTALL_DIR="/tmp/deps_cache_is_for_windows_only"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            PYBIND11_INSTALL_DIR="C:/pybind11"
          fi
          echo "PYBIND11_VERSION=$PYBIND11_VERSION" | tee -a $GITHUB_ENV
          echo "PYBIND11_INSTALL_DIR=$PYBIND11_INSTALL_DIR" | tee -a $GITHUB_ENV
          
          mkdir -p "$GITHUB_WORKSPACE/sofa" "$GITHUB_WORKSPACE/build" "$GITHUB_WORKSPACE/install" "$GITHUB_WORKSPACE/artifact"
             SOFA_ROOT="$(cd $GITHUB_WORKSPACE/sofa     && pwd -W 2>/dev/null || pwd)"
               SRC_DIR="$(cd $GITHUB_WORKSPACE/src      && pwd -W 2>/dev/null || pwd)"
             BUILD_DIR="$(cd $GITHUB_WORKSPACE/build    && pwd -W 2>/dev/null || pwd)"
           INSTALL_DIR="$(cd $GITHUB_WORKSPACE/install  && pwd -W 2>/dev/null || pwd)"
          ARTIFACT_DIR="$(cd $GITHUB_WORKSPACE/artifact && pwd -W 2>/dev/null || pwd)"
          echo "SOFA_ROOT=$SOFA_ROOT" | tee -a $GITHUB_ENV
          echo "SRC_DIR=$SRC_DIR" | tee -a $GITHUB_ENV
          echo "BUILD_DIR=$BUILD_DIR" | tee -a $GITHUB_ENV
          echo "INSTALL_DIR=$INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" | tee -a $GITHUB_ENV
          
          echo "CCACHE_COMPRESS=true" | tee -a $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=6" | tee -a $GITHUB_ENV
          echo "CCACHE_MAXSIZE=500M" | tee -a $GITHUB_ENV
          echo "CCACHE_BASEDIR=$SRC_DIR" | tee -a $GITHUB_ENV
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" | tee -a $GITHUB_ENV

      - name: Setup SOFA and deps
        id: sofa
        uses: guparan/sofa-setup-action@master
        with:
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_root: ${{ env.SOFA_ROOT }}

      - name: Print sofa-setup-action outputs
        shell: bash
        run: |
          echo 'steps.sofa.outputs = ${{ toJSON(steps.sofa.outputs) }}'
        
      - name: pybind11 cache files
        uses: actions/cache@v2
        id: pybind11_cache
        with:
          path: ${{ env.PYBIND11_INSTALL_DIR }}
          key: pybind11_${{ steps.sofa.outputs.run_branch }}_${{ runner.os }}_${{ env.PYBIND11_VERSION }}_${{ hashFiles('src/.github/workflows/*.yml') }}
      
      - name: Install pybind11
        shell: bash
        run: |
          # Build and install pybind11
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            if ! ls -a "$PYBIND11_INSTALL_DIR"/* >/dev/null 2>&1; then
              # directory does not exist or is empty
              git clone -b v$PYBIND11_VERSION --depth 1 https://github.com/pybind/pybind11.git "${{ runner.temp }}/pybind11_tmp"
              cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} && \
                cd /d ${{ runner.temp }}/pybind11_tmp && \
                cmake \
                  -GNinja \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DPYBIND11_TEST=OFF \
                  -DCMAKE_INSTALL_PREFIX=$PYBIND11_INSTALL_DIR \
                  . && \
                  ninja install"
            fi          
            echo "pybind11_ROOT=$PYBIND11_INSTALL_DIR" | tee -a $GITHUB_ENV
            echo "$PYBIND11_INSTALL_DIR" >> $GITHUB_PATH
          else
            git clone -b v${PYBIND11_VERSION} --depth 1 https://github.com/pybind/pybind11.git "${{ runner.temp }}/pybind11_tmp"
            cd "${{ runner.temp }}/pybind11_tmp"
            cmake \
              -GNinja \
              -DCMAKE_BUILD_TYPE=Release \
              -DPYBIND11_TEST=OFF \
              -DPYTHON_EXECUTABLE=$(which python${{ env.PYTHON_VERSION }}) \
              .
            sudo ninja install
          fi

      - name: ccache cache files
        if: ${{ runner.os != 'Windows' }}
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache_${{ runner.os }}

      - name: Build and install
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} \
              && cd /d $BUILD_DIR \
              && cmake \
                  -GNinja \
                  -DCMAKE_PREFIX_PATH="${{ steps.sofa.outputs.sofa_root }}/lib/cmake" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" \
                  -DPython_ROOT=$PYTHON_ROOT \
                  ../src \
              && ninja install"
          else
            cd "$BUILD_DIR"
            ccache -z
            cmake \
              -GNinja \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PREFIX_PATH=${{ steps.sofa.outputs.sofa_root }}/lib/cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" \
              -DPython_ROOT=$PYTHON_ROOT \
              ../src
            ninja install
            echo ${CCACHE_BASEDIR}
            ccache -s
          fi
          echo '------ ls -la "$SRC_DIR" ------'
          ls -la "$SRC_DIR"
          echo '------ ls -la "$BUILD_DIR" ------'
          ls -la "$BUILD_DIR"
          echo '------ ls -la "$INSTALL_DIR" ------'
          ls -la "$INSTALL_DIR"

      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: SofaPython3_${{ steps.sofa.outputs.run_branch }}_SOFA-${{ matrix.sofa_branch }}_${{ steps.sofa.outputs.sofa_os }}
          path: ${{ env.INSTALL_DIR }}

      - name: Install artifact
        uses: actions/download-artifact@v2
        with:
          name: SofaPython3_${{ steps.sofa.outputs.run_branch }}_SOFA-${{ matrix.sofa_branch }}_${{ steps.sofa.outputs.sofa_os }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: Set env vars for tests
        shell: bash
        run: |
          # Set env vars for tests
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$(cd $ARTIFACT_DIR/lib && pwd -W)" >> $GITHUB_PATH
            echo "$(cd $ARTIFACT_DIR/bin && pwd -W)" >> $GITHUB_PATH
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "DYLD_LIBRARY_PATH=$ARTIFACT_DIR/lib:${{ steps.sofa.outputs.sofa_root }}/lib:$DYLD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          else
            echo "LD_LIBRARY_PATH=$ARTIFACT_DIR/lib:${{ steps.sofa.outputs.sofa_root }}/lib:$LD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          fi
          echo "PYTHONPATH=$ARTIFACT_DIR/lib/python3/site-packages:$PYTHONPATH" | tee -a $GITHUB_ENV
          # Add execution right on the tests
          chmod +x $ARTIFACT_DIR/bin/*.Tests$EXE

      - name: Run test Binding.Sofa.Tests
        if: ${{ always() }}
        shell: bash
        run: |
          cd $ARTIFACT_DIR
          ./bin/Bindings.Sofa.Tests$EXE

      - name: Run test Bindings.SofaRuntime.Tests
        if: ${{ always() }}
        shell: bash
        run: |
          cd $ARTIFACT_DIR
          ./bin/Bindings.SofaRuntime.Tests$EXE

      - name: Run test Bindings.SofaTypes.Tests
        if: ${{ always() }}
        shell: bash
        run: |
          cd $ARTIFACT_DIR
          ./bin/Bindings.SofaTypes.Tests$EXE

      - name: Run test Bindings.Modules.Tests
        if: ${{ always() }}
        shell: bash
        run: |
          cd $ARTIFACT_DIR
          ./bin/Bindings.Modules.Tests$EXE
