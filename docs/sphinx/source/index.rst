General overview
================

The SofaPython3 project brings python bindings for the `SOFA simulation framework <https://www.sofa-framework.org>`_.
Thereby, it allows users to access most of the components and API found in SOFA directly into their python scripts.

This project is composed of two modules: *Sofa plugin* and several *python modules*.

1. The **SofaPython3 plugin** which embeds a python interpreter and a scene loader. This plugin allows one to load a python
script as the main simulation scene file. The scene loader will automatically detect the ".py", ".py3", ".py3scn" or
".pyscn" file extension and load the script into the embedded python interpreter.

2. The **SofaPython3 bindings** which make the link between the SOFA API and python. These are compiled (C++) python
modules compatible with the C-Python ABI and can therefore be directly imported into any python interpreter, given
that the python version is compatible. Hence, the python interpreter embedded inside the *SOFA plugin* will be able
to load these binding modules. In addition, one could load the binding modules directly inside their own python
interpreter without requiring the load of the plugin.

General overview
-----------------
The SOFA python packages:
^^^^^^^^^^^^^^^^^^^^^^^^^
Exposes the base Sofa object to build and manipulate a Sofa simulation.

- contains 4 submodules :
    - Sofa.Core, that contains bindings for scene components,
    - Sofa.Simulation, that contains functions to conduct simulation,
    - Sofa.Types, that contains default types available in Sofa,
    - Sofa.Helper, that contains utility functions.
- provides a copy-less API to access the sofa Data containers
- allows to implement custom sofa object (ForceField,  Controller) in python
- has docstring documentation

Try it: ```python import Sofa```

The SofaRuntime python module
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- access the runtime specific stuff (GUI, GLViewers, runSofa internal status) [POC]
- docstring with sphinx content [TBD]

Try it: ```python import SofaRuntime```

Developer's environment
^^^^^^^^^^^^^^^^^^^^^^^
- autogenerated documentation using sphinx [DONE]
- automated update the docs from the c++'s docstring: https://sofapython3.readthedocs.io/en/latest/ [WIP]
- code completion with common editor [WIP, some editor are not working with c++ modules]


Execution environment
^^^^^^^^^^^^^^^^^^^^^
- SofaPython3 is a plugin to include a python3 environment in a Sofa scene [DONE],

Try it: ```xml <RequiredPlugin='SofaPython3'/>```


- Sofa and SofaRuntime are the python module that can be imported in any python interpreter (python3, ipython, jupyter)[DONE], 

Try it: ```python python3 minimalscene.py```

- Access to Sofa simulation within the MathLab python interpreter [WIP-POC].  
- Make a full python GUI application (with UI framework like PySide2, pygame) and render an integrated sofa scene in an opengl context [POC]


Global diagram of SofaPython3
-----------------------------
.. figure:: images/SP3_global_arch.png
	:alt: How SP3 fits in the SOFA usage pipeline
	:align: center

Content
-------


.. toctree::
   :glob:
   :maxdepth: 1

   menu/Welcome 
   menu/install
   menu/SofaPlugin
   menu/SofaModule
   menu/pythonLibraries
   menu/CustomModule
   menu/Contributing


Contributors
------------

- Damien Marchal, Research Engineer CNRS
- Bruno Marques, Research Engineer Inria
- Eve Le Guillou, Enginnering Student

   
